#!/usr/bin/env bash

# ++-----------
# ||   00 - Local Variables
# ++------

# Add here all the variables/functions required from the scenario that 
# should not be set globally.

# ++-----------------+
# || Variables       |
# ++-----------------+

# ++-----------------+
# || Functions       |
# ++-----------------+

# ## Locates a supporting script in the supporting script library and runs it
# execute_supporting_script() {

# _support_scripts_name="$1" #"generate_consul_server_tokens.sh"

# ## This is:
# ## ops/scenarios when running remotely 
# ## scenarios/ when running locally (on bastion host)
# ## -todo find a more elegant way to check this  
# if [ -d "ops/scenarios/99_supporting_scripts/" ]; then
#   _support_scripts_path="ops/scenarios/99_supporting_scripts/"
# elif [ -d "scenarios/99_supporting_scripts/" ]; then
#   _support_scripts_path="scenarios/99_supporting_scripts/"
# else
#   log_err "[ ${OPERATE_STEP} ] Supporting scripts folder NOT FOUND...exiting"
#   exit 1
# fi

# _support_script_source="${_support_scripts_path}${_support_scripts_name}"

# if [ -f "${_support_script_source}" ]; then
# #   log "Found ${_support_scripts_name} - Copying it to scenario files."

#   ## Copy script to scenario folder to keep track of usage
#   cp "${_support_script_source}" "${ASSETS}scenario/scripts/${_support_scripts_name}"

# #   log "Running support script"
#   chmod +x "${ASSETS}scenario/scripts/${_support_scripts_name}"
#   ${ASSETS}scenario/scripts/${_support_scripts_name}

#   STAT=$?

#   ## Checking exit status
#   if [ ${STAT} -ne 0 ];  then
#     log_err "Error creating configuration. Exiting."
#     exit 1;
#   fi

# else
#   log_err "[ ${OPERATE_STEP} ] ${_support_scripts_name} - NOT FOUND...exiting"
#   exit 1
# fi

# }

