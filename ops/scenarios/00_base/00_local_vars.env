#!/usr/bin/env bash

# ++-----------------+
# || Variables       |
# ++-----------------+

## Number of servers to spin up (3 or 5 recommended for production environment)
SERVER_NUMBER=1

## Define primary datacenter and domain for the sandbox Consul DC
DOMAIN="consul"
PRIMARY_DATACENTER="dc1"

# SUpports specific version or `latest`
# CONSUL_VERSION="1.12.2"
CONSUL_VERSION="latest"

## Define the number and names of datacenters to deploy
declare -a DATACENTERS=("${PRIMARY_DATACENTER}") # "dc2" "dc3")

# declare -a SERVICES=() #"web" "api" "db")
declare -a SERVICES=("frontend" "payments" "product-api" "product-api-db" "public-api")
SVC_MATCH_IMAGE_NAME=true

declare -a MESH_ELEMENTS=() #"igw" "tgw" "mgw")

# Start file manager on operator
START_FILE_BROWSER=true

# +---+  
# | Flow Control :  Variables to influence flow of execution
# +---+  

## Debug flow, if no proper Docker image is defined start fake-app
START_APPS=false

## Timestamp
TSTAMP_MARKER="/tmp/tstamp.$$"
touch -t `date '+%Y%m%d%H%M.%S'` ${TSTAMP_MARKER}

## Header Counters
H1=0
H2=0
H3=0

# ++-----------------+
# || Functions       |
# ++-----------------+

## Prints a line on stdout prepended with date and time
log() {
  echo -e "\033[1m["$(date +"%Y-%d-%d %H:%M:%S")"] - ${@}\033[0m"
}

log_err() {
  DEC_ERR="\033[1m\033[31m[ERROR] \033[0m\033[1m"
  log "${DEC_ERR}${@}"  
}

log_warn() {
  DEC_WARN="\033[1m\033[33m[WARN] \033[0m\033[1m"
  log "${DEC_WARN}${@}"  
}

## Prints a header on stdout
header() {

  echo -e " \033[1m\033[32m"

  echo ""
  echo "++----------- " 
  echo "||   ${@} "
  echo "++------      " 

  echo -e "\033[0m"
}

header1() {
  H1=$((H1+1))
  H2=0
  H3=0
  header "$H1 - $@"

  log_provision "# $H1 - ${@}"
}

header2() {
  H2=$((H2+1))
  H3=0

  echo -e " \033[1m\033[32m"
  echo "##   $H1.$H2 - ${@} "
  echo -e "\033[0m"

  log_provision "## $H1.$H2 - ${@}"

}

header3() {

  H3=$((H3+1))

  echo -e " \033[1m\033[32m"
  echo "###   $H1.$H2.$H3 - ${@} "
  echo -e "\033[0m"

  log_provision "### $H1.$H2.$H3 - ${@}"

}

log_provision() {

  if [ ! -z "${LOG_PROVISION}" ]; then
    touch ${LOG_PROVISION}
    echo -e "${@}" >> ${LOG_PROVISION}
  fi

}

## Check if the binary exists otherwise exits
prerequisite_check() {
  if [ ! -z "$1" ] ; then
    if [[ `which $1` ]] ; then
      log "[ $1 ] - found"
      return
    fi
  fi
  log_err "[ $1 ] - Not found"
  exit 1
}

## Check if OS is Linux based or not
is_linux() {

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo true
  else
    echo false
  fi

}

