#!/usr/bin/env bash

# ++-----------
# ||   10 - Scenario related functions and variables
# ++------

# ++-----------------+
# || Variables       |
# ++-----------------+

## -todo: [REFACTOR] Parametrize `./scenarios/`
## Seems that the PATH reference is the one from which this file is sourced. So
## setting a scenario folder from the main script could be used.
## Having this detached from this script allows having a portable folder with 
## different names and arbitrary paths.
SCENARIOS="./scenarios/"




## Current Implementation

## DATA FORMAT:
##    * Each scenario folder is named with the following schema: '[\d\d]_.*.env'
##    * * Each scenario folder contains files named with the following schema: 
##       '[\d\d]_.*.(env|sh)'. Those files represent the scenario.
##    * * Each scenario folder might contain other files with specific 
##        instructions for infrastructure provisioning and cleaning the idea is  
##        to have files like 'spin_infrastructure.sh' or 'test_scenario.sh' and 
##        'solve_scenario.sh' to allow automated testing.

## SCENARIO DEFINITION
## A scenario is a set of bash scripts and environment variable files that are 
## intended to be executed sequentially on a Linux VM to apply a configuration
## on a pre-existing environment. A scenario is intended to be a tool to quickly
## deploy a specific configuration on a specific infrastructure.


# ++-----------------+
# || Functions       |
# ++-----------------+

## -todo: finalize flow
## Operates a scenario in the folder.
## Having the function here permits to create portable self-contained scenario
##      folders. This gives the opportunity to create different operate 
##      functions to adapt to every different platform.

## LOGIC:
## Gets `scenario_name_prefix` and looks for a scenario folder with a matching 
## name. If one is found, get a list of the files with `env` and `sh` extension 
## sorted by name and concatenates their content in a file named `operate.sh`.
## The script is then, either copied on a remote Bastion Host and executed 
## remotely, or executed locally.
##
##  Options:
##      local       Runs scenario on local node. 
##                  To be used on Bastion Host only.
##
##      remote      Runs scenario on remote node. 
##                  Relies on ${REMOTE_OPS} ==true && ${BASTION_HOST} != ""
##
##  Relies On:      00_shared_functions.env

## USAGE:
##  Usage: operate_scenario scenario_name_prefix
operate_scenario() { 

  ########## ------------------------------------------------
  header1     "OPERATING SCENARIO"
  ###### -----------------------------------------------

  if [ ! -z $1 ]; then

    SCENARIO_FOLDER=`find ./scenarios/$1* -maxdepth 0`
    
    if [ ! -d "${SCENARIO_FOLDER}" ]; then
      echo Scenario not found.
      echo Available scenarios:
      find ./scenarios/* -maxdepth 0 | sed 's/.*\//\t/g'
    fi
  
  else
    echo Pass a scenario as argument.
    echo Available scenarios:
    find ./scenarios/* -maxdepth 0 | sed 's/.*\//\t/g'
  fi

  mkdir -p ${ASSETS}scenario/scripts

  ## Copy variables and functions
  ## todo: [CHECK] Check PATHS
  cat ${ASSETS}/scenario/scenario_env.env > ${ASSETS}scenario/scripts/operate.sh
  cat ./scenarios/00_shared_functions.env >> ${ASSETS}scenario/scripts/operate.sh

  for i in `find ${SCENARIO_FOLDER}/* -name "[0-9]*" | sort` ; do
    cat $i >> ${ASSETS}scenario/scripts/operate.sh
  done

  chmod +x ${ASSETS}scenario/scripts/operate.sh

  if [ "${REMOTE_OPS}" == "true" ]; then
    remote_copy ${BASTION_HOST} "${ASSETS}scenario/scripts/operate.sh" "${WORKDIR}operate.sh"
    remote_exec ${BASTION_HOST} "${WORKDIR}operate.sh"
  else
    ${ASSETS}scenario/scripts/operate.sh
  fi
  
  set +x 
}

## -todo: Function `solve_scenario`
## To use the tool as a scenario tester it is necessary to place a file named
## `solve_scenario.sh` inside the scenario folder that will be executed on the 
## same Bastion Host (locally or remotely) to perform the scenario steps.
solve_scenario() {
  ########## ------------------------------------------------
  header1     "SOLVING SCENARIO"
  ###### -----------------------------------------------
  
  log_err "Function ${FUNCNAME[0]} not yet implemented."
  exit 0

  ## The function is already working logically but is commented for testing 
  ## reasons. Requires remote_copy() and remote_exec() functions but until the 
  ## operate workflow is not completed it is impossible to test properly.


  # if [ -f  ${SCENARIO_FOLDER}/solve_scenario.sh ]; then

  #   pushd ${SCENARIO_FOLDER} > /dev/null 2>&1

  #   # Copy script to operator container
  #   docker cp solve_scenario.sh operator:/home/app/solve_scenario.sh
  
  #   # Run script
  #   # docker exec -it operator "chmod +x /home/app/operate.sh"
  #   docker exec -it operator "/home/app/solve_scenario.sh"
  #   popd > /dev/null 2>&1
  # fi

  # set +x
}

## -todo: Function `check_scenario`
## To use the tool as a scenario tester it is necessary to place a file named
## `check_scenario.sh` inside the scenario folder that will be executed on the 
## same Bastion Host (locally or remotely) to check the scenario state.
check_scenario() {
  ########## ------------------------------------------------
  header1     "CHECKING SCENARIO"
  ###### -----------------------------------------------
  log_err "Function ${FUNCNAME[0]} not yet implemented."
  exit 0
}

## -todo: Function `clean_scenario_sw`
## Cleans all the files created by this scenario as well as
# the configurations made to other nodes
clean_scenario_sw() {
  log_err "Function ${FUNCNAME[0]} not yet implemented."
  exit 0
}

## Internal function. Takes a string as an argument and returns the path of a 
## scenario folder with a name that matches the string. It should return an 
## empty string if no matching scenario folder is found.
_locate_scenario() {
  if [ ! -z $1 ]; then
      ## todo Implement stricter input control
    ## For now if more than one scenario is found, takes first alfabetical
    SCENARIO_FOLDER=`find ./scenarios/ -maxdepth 1 -name "*$1*" -type d | sort | head -1`
  fi  

  echo ${SCENARIO_FOLDER}
}

## Internal function. Takes a string as an argument and returns true if it is an 
## existing folder
_check_scenario() {
  if [ ! -z $1 ]; then
    ##  todo Implement stricter input control
    SCENARIO_FOLDER=$1

    if [ ! -d "${SCENARIO_FOLDER}" ]; then
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      return 1
    fi

  else
    log_err "Scenario not found. @${FUNCNAME[0]}"
    _print_available_scenarios
    return 1
  fi

  return 0
}

## Internal function. Prints all available scenario.
_print_available_scenarios() {
  log_warn "List of available scenarios:`find ./scenarios/ -maxdepth 1 -type d | sed 's/.*\//\t/g' | sort `"
}

## Only creates script without executing it or copying it to the Bastion Host.
operate_dry() { 

  log "Check scenario"

  if [ ! -z $1 ]; then

    SCENARIO_FOLDER=$(_locate_scenario $1)

    if _check_scenario $SCENARIO_FOLDER; then 
      ## Scenario found
      log "Found scenario at ${SCENARIO_FOLDER}"

      mkdir -p ${ASSETS}scenario/scripts


      ## Copy variables and functions
      ##  ~todo: [CHECK] Check PATHS for existence
      ## If scenario file does not exist the final script might not work.
      # echo "OPERATE_STEP=scenario_env.env" > ${ASSETS}scenario/scripts/operate.sh
      cat ${ASSETS}scenario/scenario_env.env >> ${ASSETS}scenario/scripts/operate.sh
      echo -e "\nOPERATE_STEP=00_shared_functions.env\n" >> ${ASSETS}scenario/scripts/operate.sh
      cat ./scenarios/00_shared_functions.env >> ${ASSETS}scenario/scripts/operate.sh

      ## !todo  [REFACTOR] Currently selecting the scenario files only by names starting with a number 
      for i in `find ${SCENARIO_FOLDER}/* -name "[0-9]*" | sort` ; do
        echo -e "\nOPERATE_STEP=`basename $i`\n" >> ${ASSETS}scenario/scripts/operate.sh
        cat $i >> ${ASSETS}scenario/scripts/operate.sh
      done

      chmod +x ${ASSETS}scenario/scripts/operate.sh

    else
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      ## Without a scenario to run we exit before doing any damage. 
      return 1
    fi


  else
    log_err "Scenario is empty. Pass a scenario name as argument. @${FUNCNAME[0]}"
    _print_available_scenarios
    ## Without a scenario to run we exit before doing any damage. 
    return 1
  fi

  ## When reaching this line scenario file should be ready.
  return 0

  ## todo: prerequisites embedding
  ## To generate self-contained scripts it would be nice to have a way to 
  ## generate the supporting scripts required by the scenario.

}

## Runs the scenario step generated previously either on the local node or on a 
## remote node.
execute_scenario_step(){

  SCENARIO_STEP=$1
  SCENARIO_FILE="${ASSETS}scenario/scripts/${SCENARIO_STEP}.sh"

  ## Check if scenario step file is populated
  if [ -f "${SCENARIO_FILE}" ]; then
    log "Scenario located at ${SCENARIO_FILE}"

    ## Check if is dry_run or not
    if [ "${_DRY_RUN}" == "true" ]; then
     log_warn "Script is in 'dry_run' mode. No command executed."
     exit 0
    else
      if [ ${_RUN_LOCAL} == "true" ]; then
        log "Running scenario step locally. This means you are on Bastion Host."
        ${SCENARIO_FILE}
      else
        log "Running scenario step remotely on ${BASTION_HOST}."
        ## -todo: copy assets option config
        ## Since the use of support scripts makes the scenario not portable
        ## When copying the scenario script on a remote host we need also to
        ## upload the support scripts.
        provision_scenario_supporting_scripts
        remote_copy ${BASTION_HOST} "${SCENARIO_FILE}" "~/${SCENARIO_STEP}.sh"
        remote_exec ${BASTION_HOST} "~/${SCENARIO_STEP}.sh"
      fi
      exit 0
    fi
  else
    log_err "Scenario file not found at ${SCENARIO_FILE}"
    log_err "Nothing will be done..."
    exit 1
  fi

}

## Used to upload suporting scripts too when running in remote mode.
provision_scenario_supporting_scripts() {
  _support_scripts_path="scenarios/99_supporting_scripts/"
  # _support_scripts_name="generate_consul_server_config.sh"
  # _support_script_source="${_support_scripts_path}${_support_scripts_name}"
  remote_copy ${BASTION_HOST} "${_support_scripts_path}" "~/ops/${_support_scripts_path}"
}

# ## Copies a script on a remote host and executes it. If set for local execution
# ## checks the file existence and runs it locally.
# copy_and_exec(){

#   ## Check file existence

  
#   # chmod +x ${ASSETS}scenario/scripts/operate.sh

#   # if [ "${REMOTE_OPS}" == "true" ]; then
#   #   remote_copy ${BASTION_HOST} "${ASSETS}scenario/scripts/operate.sh" "${WORKDIR}operate.sh"
#   #   remote_exec ${BASTION_HOST} "${WORKDIR}operate.sh"
#   # else
#   #   ${ASSETS}scenario/scripts/operate.sh
#   # fi

# }